name: CMake Windows

on:
  push:
    branches: [ "main","gha" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      SAGA: D:\deps\saga-9.2.0_x64

    strategy:
      fail-fast: false

      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: get cached saga folder
      id: get-saga-cache
      uses: actions/cache@v3
      with:
        path: d:/deps/saga-9.2.0_x64
        key: saga-9.2.0_x64
    - if: ${{ steps.get-saga-cache.outputs.cache-hit != 'true' }}
      name: get saga build
      shell: bash
      run: |
        mkdir d:\\deps
        C:\\msys64\\usr\\bin\\wget https://sourceforge.net/projects/saga-gis/files/SAGA%20-%209/SAGA%20-%209.2.0/saga-9.2.0_x64.zip/download -O d:/deps/saga.zip
        7z x d:\\deps\\saga.zip -o"d:\\deps\\"
     
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        echo $env:SAGA
        dir $env:SAGA
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      run: pytest
